#include "FancyChapterPreview.lyn.event"

FancyChapterPreviewMenu_Def:
BYTE 24 		//x coord
BYTE 13 		//y coord
BYTE 5 			//width
BYTE 6			//height (irrelevant)
WORD 3 			//style
POIN FancyChapterPreviewMenu_Commands
POIN FancyChapterPreviewMenu_OnInit
POIN FancyChapterPreviewMenu_OnEnd
POIN 0x234FD	//NoCommandEffect (this is OnBPress)
WORD 0			//OnRPress
WORD 0			//OnHelpBox

#define MenuCommandAction(name,description,colour,usability,effect,action) "WORD $80d7d94; SHORT name description; BYTE colour $4e; SHORT 0; POIN usability|1; POIN 0; POIN effect|1; POIN 0 action|1 0"

FancyChapterPreviewMenu_Commands:
//No
MenuCommandAction(0x844,0,NormalText,$4F449,FancyChapterPreviewMenu_SelectNo,FancyChapterPreviewMenu_OnHover) 
//Yes
MenuCommandAction(0x843,0,NormalText,$4F449,FancyChapterPreviewMenu_SelectYes,FancyChapterPreviewMenu_OnHover) 
UM_Separator

ALIGN 4
ChapterPreviewTable:
FILL (256*10)

TextDrawnFlagLoc_Link:
WORD $202F0FF

//use this to define the text IDs associated with each chapter for displaying here
#define ChapterPreviewEntry(chapterID, chapterNameTextID, objectiveTextID, unitsTextID, lootTextID, chapterConfirmTextID) "PUSH; ORG ChapterPreviewTable+(chapterID*10); SHORT chapterNameTextID objectiveTextID unitsTextID lootTextID chapterConfirmTextID; POP"

//use this in events; at the end, the yes/no result is 1/0 in sC
#define FancyChapterPreview(chapterID, backgroundID, currentChapterID) "SVAL s1 chapterID; SetBackground(backgroundID); ASMC ChapterPreviewASMC; LOMA currentChapterID; FADI 10; EraseBackground;"

ChapterPreviewEntry(0, ChMenuTestString, ChMenuTestString, ChMenuTestString, ChMenuTestString, ChMenuTestString)
